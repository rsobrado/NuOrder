{"version":3,"sources":["components/Issues.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","number","color","fontSize","marginRight","user","login","fontWeight","Issues","props","classes","useState","issues","setIssues","useEffect","Fragment","map","issue","index","TableRow","hover","role","tabIndex","key","TableCell","className","href","html_url","target","title","labels","label","style","background","marginLeft","borderRadius","padding","name","search","boxShadow","rounded","position","zIndex","top","textShadow","maxWidth","pagination","justifyContent","listbox","margin","groupUl","option","borderBottom","backgroundColor","borderColor","Dashboard","value","setValue","page","setPage","timeRef","useRef","handleSearch","useCallback","event","current","handleAuto","innerHTML","setInterval","a","axios","result","data","items","loadData","Container","Grid","container","item","xs","lg","Paper","elevation","Typography","variant","gutterBottom","TableContainer","Table","stickyHeader","aria-label","TableHead","spacing","direction","Autocomplete","id","freeSolo","fullWidth","options","onChange","popper","renderInput","params","TextField","TableBody","Pagination","count","ul","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0f95a956.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport TableCell from '@material-ui/core/TableCell'\nimport TableRow from '@material-ui/core/TableRow'\n\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n  number: {\n    color: '#b1b1b1',\n    fontSize: 'small',\n    marginRight: 5,\n  },\n  user: {\n    color: '#717171',\n    fontSize: 'small',\n    marginRight: 2,\n  },\n  login: {\n    color: '#717171',\n    fontSize: 'small',\n    marginRight: 20,\n    fontWeight: 'bold',\n  },\n}))\n\nexport default function Issues(props) {\n  const classes = useStyles()\n  const [issues, setIssues] = useState([])\n\n  useEffect(() => {\n    setIssues(props.issues)\n  }, [props])\n\n  return (\n    <React.Fragment>\n      {issues &&\n        issues.map((issue, index) => (\n          <TableRow hover role=\"checkbox\" tabIndex={-1} key={index}>\n            <TableCell>\n              <h3>\n                <span className={classes.number}>#{issue.number} </span>\n                <a href={issue.html_url} target=\"_new\">\n                  {issue.title}\n                </a>\n              </h3>\n              <div>\n                <span className={classes.user}>Opened by: </span>\n                <span className={classes.login}>{issue.user.login} </span>\n\n                {issue.labels &&\n                  issue.labels.map((label, index) => (\n                    <span\n                      style={{\n                        background: `#${label.color}`,\n                        marginLeft: '5px',\n                        fontSize: 'small',\n                        borderRadius: 10,\n                        padding: '2px 5px',\n                      }}\n                      key={index}>\n                      {label.name}\n                    </span>\n                  ))}\n              </div>\n              {/* <span>{issue.body}</span> */}\n            </TableCell>\n          </TableRow>\n        ))}\n    </React.Fragment>\n  )\n}\n","import React, { useCallback, useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport Container from '@material-ui/core/Container'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport Paper from '@material-ui/core/Paper'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport TextField from '@material-ui/core/TextField'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\n\nimport Pagination from '@material-ui/lab/Pagination'\n\nimport Issues from './Issues'\n\nconst useStyles = makeStyles((theme) => ({\n  search: {\n    borderRadius: 20,\n    background: 'white',\n    boxShadow: 'inset 0 1px 4px 2px rgba(0,0,0,0.12)',\n  },\n  rounded: {\n    borderRadius: 25,\n    position: 'relative',\n  },\n  login: {\n    color: '#717171',\n    fontSize: 'small',\n    marginRight: 18,\n    fontWeight: 'bold',\n  },\n  title: {\n    color: 'white',\n    position: 'absolute',\n    zIndex: '-1',\n    top: '-55px',\n    background: 'linear-gradient(123deg,#3978af 0,#2bbfc3 50%,#2898bb 100%)',\n    padding: '15px 53px 50px 53px ',\n    borderRadius: 30,\n    textShadow: '1px 1px 2px rgba(0,0,0,0.22), 2px 2px 4px rgba(0,0,0,0.22)',\n    maxWidth: 380,\n  },\n  pagination: {\n    justifyContent: 'center',\n    padding: '20px 0',\n  },\n  listbox: {\n    boxShadow: 'none',\n    padding: 0,\n    margin: 0,\n  },\n  groupUl: {\n    padding: 0,\n    margin: 0,\n  },\n  option: {\n    borderBottom: `1px solid rgba(0,0,0,0.1)`,\n    // Hover\n    '&[data-focus=\"true\"]': {\n      backgroundColor: 'rgba(0,0,0,0.05)',\n      borderColor: 'transparent',\n    },\n    // Selected\n    '&[aria-selected=\"true\"]': {\n      backgroundColor: 'rgba(0,0,0,0.05)',\n      borderColor: 'transparent',\n    },\n  },\n}))\n\nexport default function Dashboard() {\n  const classes = useStyles()\n  const [issues, setIssues] = useState([])\n  const [value, setValue] = useState('')\n  const [page, setPage] = useState(1)\n  const timeRef = useRef(0)\n\n  const handlePagination = (event, value) => {\n    setPage(value)\n  }\n\n  const handleSearch = useCallback((event) => {\n    if (timeRef.current >= 400) {\n      setValue(event.target.value)\n      timeRef.current = 0\n    }\n  }, [])\n\n  const handleAuto = useCallback((event) => {\n    if (timeRef.current >= 400) {\n      setValue(event.target.innerHTML)\n      timeRef.current = 0\n    }\n  }, [])\n\n  useEffect(() => {\n    setInterval(() => (timeRef.current += 100), 100)\n  }, [])\n\n\n  useEffect(() => {\n    async function loadData() {\n      if (value === '') {\n        const result = await axios(\n          `https://api.github.com/search/issues?q=repo:facebook/react&page=${page}+&per_page=30`\n        )\n        setIssues(result.data.items)\n      } else {\n        const result = await axios(\n          `https://api.github.com/search/issues?q=${value}+&repo:facebook/react&page=${page}+&per_page=30`\n        )\n        setIssues(result.data.items)\n      }\n    }\n    loadData()\n  }, [page, value])\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Grid container>\n        <Grid item xs={12} lg={12}>\n          <Paper elevation={24} className={classes.rounded}>\n            <Typography variant=\"h6\" gutterBottom className={classes.title}>\n              Facebook / React / Issues\n            </Typography>\n            <TableContainer>\n              <Table stickyHeader aria-label=\"sticky table\" lg={12}>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>\n                      <Grid container spacing={4} direction=\"row\">\n                        <Grid item xs={12} lg={12}>\n                          <Autocomplete\n                            id=\"search-issue\"\n                            freeSolo\n                            fullWidth={true}\n                            options={issues.map((option) => option.title)}\n                            onChange={handleAuto}\n                            classes={{\n                              option: classes.option,\n                              listbox: classes.listbox,\n                              popper: classes.popper,\n                              groupUl: classes.groupUl,\n                            }}\n                            renderInput={(params) => (\n                              <TextField\n                                {...params}\n                                label=\"Search Issues...\"\n                                margin=\"normal\"\n                                variant=\"filled\"\n                                className={classes.search}\n                                fullWidth={true}\n                                onChange={handleSearch}\n                              />\n                            )}\n                          />\n                        </Grid>\n                      </Grid>\n                    </TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  <Issues issues={issues} />\n                </TableBody>\n              </Table>\n            </TableContainer>\n            <Pagination\n              count={10}\n              page={page}\n              onChange={handlePagination}\n              classes={{\n                ul: classes.pagination,\n              }}\n            />\n          </Paper>\n        </Grid>\n      </Grid>\n    </Container>\n  )\n}\n","import React from 'react'\n\nimport './App.css'\nimport Dashboard from './components/Dashboard'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard></Dashboard>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}